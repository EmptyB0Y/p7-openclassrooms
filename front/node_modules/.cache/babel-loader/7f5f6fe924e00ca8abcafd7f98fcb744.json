{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LILKETRU\\\\Desktop\\\\openclassrooms\\\\P7\\\\Groupomania\\\\front\\\\src\\\\components\\\\GifSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GifSearch = () => {\n  _s();\n\n  const [gifs, setGifs] = useState([]);\n  const [term, updateTerm] = useState('');\n  useEffect(() => {\n    fetchGifs();\n  }, []);\n\n  async function fetchGifs() {\n    try {\n      const API_KEY = 'EP7RKmRrQ1bMjBgJAFIR01e0FLIh7ds8';\n      const BASE_URL = 'http://api.giphy.com/v1/gifs/search';\n      fetch(`${BASE_URL}?api_key=${API_KEY}&q=${term}`).then(resJson => {\n        console.log(resJson.body);\n        resJson.json().then(res => {\n          console.log(res);\n          setGifs(res.data);\n        });\n      });\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  function onGifSearch(e) {\n    let newTerm = e.target.value;\n    updateTerm(newTerm);\n    fetchGifs();\n  }\n\n  let gifListElement = /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: gifs.map(gif => {\n      /*#__PURE__*/\n      _jsxDEV(\"img\", {\n        src: gif.images.original.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"gif-search-input\",\n      onInput: e => onGifSearch(e),\n      width: \"20\",\n      height: \"20\",\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), gifListElement]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this)\n  /*<View style={styles.view}>\r\n  <TextInput\r\n      placeholder=\"Search Giphy\"\r\n      placeholderTextColor='#fff'\r\n      style={styles.textInput}\r\n      onChangeText={(text) => onGifSearch(text)}\r\n  />\r\n  <FlatList\r\n      data={gifs}\r\n      renderItem={({item}) => (\r\n      <Image\r\n          resizeMode='contain'\r\n          style={styles.image}\r\n          source={{uri: item.images.original.url}}\r\n      />\r\n      )}\r\n  />\r\n  </View>*/\n  ;\n};\n\n_s(GifSearch, \"OWUrZZv6r22qagQe3ZsN67WvjZ0=\");\n\n_c = GifSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"GifSearch\");","map":{"version":3,"sources":["C:/Users/LILKETRU/Desktop/openclassrooms/P7/Groupomania/front/src/components/GifSearch.js"],"names":["React","useEffect","useState","GifSearch","gifs","setGifs","term","updateTerm","fetchGifs","API_KEY","BASE_URL","fetch","then","resJson","console","log","body","json","res","data","error","warn","onGifSearch","e","newTerm","target","value","gifListElement","map","gif","images","original","url"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAK;AAAA;;AAE1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACI,IAAD,EAAOC,UAAP,IAAqBL,QAAQ,CAAC,EAAD,CAAnC;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVO,IAAAA,SAAS;AACZ,GAFQ,EAEP,EAFO,CAAT;;AAIA,iBAAeA,SAAf,GAA2B;AACvB,QAAI;AACJ,YAAMC,OAAO,GAAG,kCAAhB;AACA,YAAMC,QAAQ,GAAG,qCAAjB;AACAC,MAAAA,KAAK,CAAE,GAAED,QAAS,YAAWD,OAAQ,MAAKH,IAAK,EAA1C,CAAL,CAAkDM,IAAlD,CAAwDC,OAAD,IAAW;AAC9DC,QAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,IAApB;AACAH,QAAAA,OAAO,CAACI,IAAR,GAAeL,IAAf,CAAqBM,GAAD,IAAO;AACvBJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACAb,UAAAA,OAAO,CAACa,GAAG,CAACC,IAAL,CAAP;AACH,SAHD;AAIH,OAND;AAOC,KAVD,CAUE,OAAOC,KAAP,EAAc;AAChBN,MAAAA,OAAO,CAACO,IAAR,CAAaD,KAAb;AACC;AACJ;;AAED,WAASE,WAAT,CAAqBC,CAArB,EAAwB;AACpB,QAAIC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAvB;AACAnB,IAAAA,UAAU,CAACiB,OAAD,CAAV;AACAhB,IAAAA,SAAS;AACZ;;AAEC,MAAImB,cAAc,gBAClB;AAAA,cACKvB,IAAI,CAACwB,GAAL,CAAUC,GAAD,IAAO;AACb;AAAA;AAAK,QAAA,GAAG,EAAEA,GAAG,CAACC,MAAJ,CAAWC,QAAX,CAAoBC;AAA9B;AAAA;AAAA;AAAA;AAAA;AACH,KAFA;AADL;AAAA;AAAA;AAAA;AAAA,UADA;;AAOF,sBACI;AAAA,4BAEA;AAAO,MAAA,EAAE,EAAC,kBAAV;AAA6B,MAAA,OAAO,EAAGT,CAAD,IAAOD,WAAW,CAACC,CAAD,CAAxD;AAA6D,MAAA,KAAK,EAAC,IAAnE;AAAwE,MAAA,MAAM,EAAC,IAA/E;AAAoF,MAAA,QAAQ;AAA5F;AAAA;AAAA;AAAA;AAAA,YAFA,EAGCI,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBI;AAyBH,CA/DM;;GAAMxB,S;;KAAAA,S","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nexport const GifSearch = () =>{\r\n\r\n    const [gifs, setGifs] = useState([]);\r\n    const [term, updateTerm] = useState('');\r\n\r\n    useEffect(()=>{\r\n        fetchGifs();\r\n    },[]);\r\n\r\n    async function fetchGifs() {\r\n        try {\r\n        const API_KEY = 'EP7RKmRrQ1bMjBgJAFIR01e0FLIh7ds8';\r\n        const BASE_URL = 'http://api.giphy.com/v1/gifs/search';\r\n        fetch(`${BASE_URL}?api_key=${API_KEY}&q=${term}`).then((resJson)=>{\r\n            console.log(resJson.body);\r\n            resJson.json().then((res)=>{\r\n                console.log(res);\r\n                setGifs(res.data);\r\n            });\r\n        });\r\n        } catch (error) {\r\n        console.warn(error);\r\n        }\r\n    }\r\n\r\n    function onGifSearch(e) {\r\n        let newTerm = e.target.value;\r\n        updateTerm(newTerm);\r\n        fetchGifs();\r\n    }\r\n\r\n      let gifListElement = (\r\n      <ul>\r\n          {gifs.map((gif)=>{\r\n              <img src={gif.images.original.url}></img>\r\n          })}\r\n      </ul>\r\n      );\r\n    return (\r\n        <div>\r\n            \r\n        <input id='gif-search-input' onInput={(e) => onGifSearch(e)} width='20' height='20' multiple/>\r\n        {gifListElement}\r\n        </div>\r\n        /*<View style={styles.view}>\r\n        <TextInput\r\n            placeholder=\"Search Giphy\"\r\n            placeholderTextColor='#fff'\r\n            style={styles.textInput}\r\n            onChangeText={(text) => onGifSearch(text)}\r\n        />\r\n        <FlatList\r\n            data={gifs}\r\n            renderItem={({item}) => (\r\n            <Image\r\n                resizeMode='contain'\r\n                style={styles.image}\r\n                source={{uri: item.images.original.url}}\r\n            />\r\n            )}\r\n        />\r\n        </View>*/\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}