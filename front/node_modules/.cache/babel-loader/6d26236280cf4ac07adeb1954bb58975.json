{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LILKETRU\\\\Desktop\\\\openclassrooms\\\\P7\\\\Groupomania\\\\front\\\\src\\\\components\\\\GifSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { View, TextInput, StyleSheet, FlatList, Image } from 'react-native';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GifSearch = () => {\n  _s();\n\n  const [gifs, setGifs] = useState([]);\n  const [term, updateTerm] = useState('');\n  useEffect(() => {\n    document.getElementById(\"addpost-frame\").style.height = height + \"px\";\n    console.log(topic.topic);\n    fetchGifs();\n\n    if (topic.topic !== 'notopic') {\n      setTopic( /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"set-topic-input\",\n        value: topic.topic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 22\n      }, this));\n    }\n  }, []);\n\n  async function fetchGifs() {\n    try {\n      const API_KEY = 'EP7RKmRrQ1bMjBgJAFIR01e0FLIh7ds8';\n      const BASE_URL = 'http://api.giphy.com/v1/gifs/search';\n      fetch(`${BASE_URL}?api_key=${API_KEY}&q=${term}`).then(resJson => {\n        console.log(resJson.body);\n        resJson.json().then(res => {\n          console.log(res);\n          setGifs(res.data);\n        });\n      });\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  function onGifSearch(e) {\n    let newTerm = e.target.value;\n    updateTerm(newTerm);\n    fetchGifs();\n  }\n\n  const styles = StyleSheet.create({\n    view: {\n      flex: 1,\n      alignItems: 'center',\n      padding: 10,\n      backgroundColor: 'darkblue'\n    },\n    textInput: {\n      width: '100%',\n      height: 50,\n      color: 'white'\n    },\n    image: {\n      width: 300,\n      height: 150,\n      borderWidth: 3,\n      marginBottom: 5\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(View, {\n    style: styles.view,\n    children: [/*#__PURE__*/_jsxDEV(TextInput, {\n      placeholder: \"Search Giphy\",\n      placeholderTextColor: \"#fff\",\n      style: styles.textInput,\n      onChangeText: text => onGifSearch(text)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FlatList, {\n      data: gifs,\n      renderItem: _ref => {\n        let {\n          item\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Image, {\n          resizeMode: \"contain\",\n          style: styles.image,\n          source: {\n            uri: item.images.original.url\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GifSearch, \"OWUrZZv6r22qagQe3ZsN67WvjZ0=\");\n\n_c = GifSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"GifSearch\");","map":{"version":3,"sources":["C:/Users/LILKETRU/Desktop/openclassrooms/P7/Groupomania/front/src/components/GifSearch.js"],"names":["React","useState","View","TextInput","StyleSheet","FlatList","Image","GifSearch","gifs","setGifs","term","updateTerm","useEffect","document","getElementById","style","height","console","log","topic","fetchGifs","setTopic","API_KEY","BASE_URL","fetch","then","resJson","body","json","res","data","error","warn","onGifSearch","e","newTerm","target","value","styles","create","view","flex","alignItems","padding","backgroundColor","textInput","width","color","image","borderWidth","marginBottom","text","item","uri","images","original","url"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {View, TextInput, StyleSheet, FlatList, Image} from 'react-native';\r\n\r\nconst GifSearch = () =>{\r\n\r\n    const [gifs, setGifs] = useState([]);\r\n    const [term, updateTerm] = useState('');\r\n\r\n    useEffect(()=>{\r\n        document.getElementById(\"addpost-frame\").style.height = height+\"px\";\r\n        console.log(topic.topic);\r\n        fetchGifs();\r\n        if(topic.topic !== 'notopic'){\r\n            setTopic(<input id='set-topic-input' value={topic.topic}></input>);\r\n        }\r\n    },[]);\r\n\r\n    async function fetchGifs() {\r\n        try {\r\n        const API_KEY = 'EP7RKmRrQ1bMjBgJAFIR01e0FLIh7ds8';\r\n        const BASE_URL = 'http://api.giphy.com/v1/gifs/search';\r\n        fetch(`${BASE_URL}?api_key=${API_KEY}&q=${term}`).then((resJson)=>{\r\n            console.log(resJson.body);\r\n            resJson.json().then((res)=>{\r\n                console.log(res);\r\n                setGifs(res.data);\r\n            });\r\n        });\r\n        } catch (error) {\r\n        console.warn(error);\r\n        }\r\n    }\r\n\r\n    function onGifSearch(e) {\r\n        let newTerm = e.target.value;\r\n        updateTerm(newTerm);\r\n        fetchGifs();\r\n    }\r\n\r\n    const styles = StyleSheet.create({\r\n        view: {\r\n          flex: 1,\r\n          alignItems: 'center',\r\n          padding: 10,\r\n          backgroundColor: 'darkblue'\r\n        },\r\n        textInput: {\r\n          width: '100%',\r\n          height: 50,\r\n          color: 'white'\r\n        },\r\n        image: {\r\n          width: 300,\r\n          height: 150,\r\n          borderWidth: 3,\r\n          marginBottom: 5\r\n        },\r\n      });\r\n\r\n    return (\r\n        <View style={styles.view}>\r\n        <TextInput\r\n            placeholder=\"Search Giphy\"\r\n            placeholderTextColor='#fff'\r\n            style={styles.textInput}\r\n            onChangeText={(text) => onGifSearch(text)}\r\n        />\r\n        <FlatList\r\n            data={gifs}\r\n            renderItem={({item}) => (\r\n            <Image\r\n                resizeMode='contain'\r\n                style={styles.image}\r\n                source={{uri: item.images.original.url}}\r\n            />\r\n            )}\r\n        />\r\n        </View>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}