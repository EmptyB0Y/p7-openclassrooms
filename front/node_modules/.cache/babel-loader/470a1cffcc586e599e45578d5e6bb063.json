{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LILKETRU\\\\Desktop\\\\openclassrooms\\\\P7\\\\Groupomania\\\\front\\\\src\\\\components\\\\GifSearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GifSearch = () => {\n  _s();\n\n  const [gifs, setGifs] = useState([]);\n  const [term, updateTerm] = useState('');\n  const [iterations, setIterations] = useState(10);\n  useEffect(() => {\n    fetchGifs().then(() => {\n      //console.log(gifs);\n      gifs.map(gif => {\n        console.log(gif);\n      });\n    });\n  }, [term]);\n\n  async function fetchGifs() {\n    try {\n      const API_KEY = 'EP7RKmRrQ1bMjBgJAFIR01e0FLIh7ds8';\n      const BASE_URL = 'http://api.giphy.com/v1/gifs/search';\n      fetch(`${BASE_URL}?api_key=${API_KEY}&q=${term}`).then(resJson => {\n        resJson.json().then(res => {\n          setGifs(res.data);\n        });\n      });\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n\n  function onGifSearch(e) {\n    let newTerm = e.target.value;\n    updateTerm(newTerm);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"gif-search\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"gif-search-input\",\n      onInput: e => onGifSearch(e),\n      width: \"20\",\n      height: \"20\",\n      multiple: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"gif-list\",\n      children: gifs.slice(0, iterations).map(gif => /*#__PURE__*/_jsxDEV(\"li\", {\n        id: gif.id,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: gif.images.fixed_height.url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this)\n      }, gif.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"load-more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GifSearch, \"vJSCKe9/KEG5fTkZI++PG85Jgag=\");\n\n_c = GifSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"GifSearch\");","map":{"version":3,"sources":["C:/Users/LILKETRU/Desktop/openclassrooms/P7/Groupomania/front/src/components/GifSearch.js"],"names":["React","useEffect","useState","GifSearch","gifs","setGifs","term","updateTerm","iterations","setIterations","fetchGifs","then","map","gif","console","log","API_KEY","BASE_URL","fetch","resJson","json","res","data","error","warn","onGifSearch","e","newTerm","target","value","slice","id","images","fixed_height","url"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAK;AAAA;;AAE1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACI,IAAD,EAAOC,UAAP,IAAqBL,QAAQ,CAAC,EAAD,CAAnC;AACA,QAAM,CAACM,UAAD,EAAYC,aAAZ,IAA6BP,QAAQ,CAAC,EAAD,CAA3C;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACVS,IAAAA,SAAS,GAAGC,IAAZ,CAAiB,MAAI;AACjB;AACAP,MAAAA,IAAI,CAACQ,GAAL,CAAUC,GAAD,IAAO;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,OAFD;AAGH,KALD;AAOH,GARQ,EAQP,CAACP,IAAD,CARO,CAAT;;AAUA,iBAAeI,SAAf,GAA2B;AACvB,QAAI;AACJ,YAAMM,OAAO,GAAG,kCAAhB;AACA,YAAMC,QAAQ,GAAG,qCAAjB;AACAC,MAAAA,KAAK,CAAE,GAAED,QAAS,YAAWD,OAAQ,MAAKV,IAAK,EAA1C,CAAL,CAAkDK,IAAlD,CAAwDQ,OAAD,IAAW;AAC9DA,QAAAA,OAAO,CAACC,IAAR,GAAeT,IAAf,CAAqBU,GAAD,IAAO;AACvBhB,UAAAA,OAAO,CAACgB,GAAG,CAACC,IAAL,CAAP;AACH,SAFD;AAGH,OAJD;AAKC,KARD,CAQE,OAAOC,KAAP,EAAc;AAChBT,MAAAA,OAAO,CAACU,IAAR,CAAaD,KAAb;AACC;AACJ;;AAED,WAASE,WAAT,CAAqBC,CAArB,EAAwB;AACpB,QAAIC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAvB;AACAtB,IAAAA,UAAU,CAACoB,OAAD,CAAV;AACH;;AAED,sBACI;AAAK,IAAA,EAAE,EAAC,YAAR;AAAA,4BACI;AAAO,MAAA,EAAE,EAAC,kBAAV;AAA6B,MAAA,OAAO,EAAGD,CAAD,IAAOD,WAAW,CAACC,CAAD,CAAxD;AAA6D,MAAA,KAAK,EAAC,IAAnE;AAAwE,MAAA,MAAM,EAAC,IAA/E;AAAoF,MAAA,QAAQ;AAA5F;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,EAAE,EAAC,UAAP;AAAA,gBACKtB,IAAI,CAAC0B,KAAL,CAAW,CAAX,EAAatB,UAAb,EAAyBI,GAAzB,CAA8BC,GAAD,iBAC1B;AAAI,QAAA,EAAE,EAAEA,GAAG,CAACkB,EAAZ;AAAA,+BACI;AAAK,UAAA,GAAG,EAAElB,GAAG,CAACmB,MAAJ,CAAWC,YAAX,CAAwBC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADJ,SAAqBrB,GAAG,CAACkB,EAAzB;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ,eASI;AAAQ,MAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAhDM;;GAAM5B,S;;KAAAA,S","sourcesContent":["import React, {useEffect, useState} from 'react';\r\n\r\nexport const GifSearch = () =>{\r\n\r\n    const [gifs, setGifs] = useState([]);\r\n    const [term, updateTerm] = useState('');\r\n    const [iterations,setIterations] = useState(10);\r\n\r\n    useEffect(()=>{\r\n        fetchGifs().then(()=>{\r\n            //console.log(gifs);\r\n            gifs.map((gif)=>{\r\n                console.log(gif);\r\n            })\r\n        });\r\n      \r\n    },[term]);\r\n\r\n    async function fetchGifs() {\r\n        try {\r\n        const API_KEY = 'EP7RKmRrQ1bMjBgJAFIR01e0FLIh7ds8';\r\n        const BASE_URL = 'http://api.giphy.com/v1/gifs/search';\r\n        fetch(`${BASE_URL}?api_key=${API_KEY}&q=${term}`).then((resJson)=>{\r\n            resJson.json().then((res)=>{\r\n                setGifs(res.data);\r\n            });\r\n        });\r\n        } catch (error) {\r\n        console.warn(error);\r\n        }\r\n    }\r\n\r\n    function onGifSearch(e) {\r\n        let newTerm = e.target.value;\r\n        updateTerm(newTerm);\r\n    }\r\n\r\n    return (\r\n        <div id='gif-search'>\r\n            <input id='gif-search-input' onInput={(e) => onGifSearch(e)} width='20' height='20' multiple/>\r\n            <ul id='gif-list'>\r\n                {gifs.slice(0,iterations).map((gif)=>\r\n                    <li id={gif.id} key={gif.id}>\r\n                        <img src={gif.images.fixed_height.url}></img>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n            <button id='load-more'></button>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}